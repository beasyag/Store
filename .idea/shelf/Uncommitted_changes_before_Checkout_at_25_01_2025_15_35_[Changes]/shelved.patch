Index: djangoProject1/users/migrations/0007_alter_product_img.py
===================================================================
diff --git a/djangoProject1/users/migrations/0007_alter_product_img.py b/djangoProject1/users/migrations/0007_alter_product_img.py
deleted file mode 100644
--- a/djangoProject1/users/migrations/0007_alter_product_img.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ /dev/null	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
@@ -1,18 +0,0 @@
-# Generated by Django 5.0.7 on 2024-09-11 09:09
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('users', '0006_rename_image_category_img_rename_image_image_img_and_more'),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name='product',
-            name='img',
-            field=models.ImageField(blank=True, null=True, upload_to='images/product/'),
-        ),
-    ]
Index: djangoProject1/users/migrations/0002_remove_brand_img.py
===================================================================
diff --git a/djangoProject1/users/migrations/0002_remove_brand_img.py b/djangoProject1/users/migrations/0002_remove_brand_img.py
deleted file mode 100644
--- a/djangoProject1/users/migrations/0002_remove_brand_img.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ /dev/null	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
@@ -1,17 +0,0 @@
-# Generated by Django 5.0.7 on 2024-09-11 08:23
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('users', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='brand',
-            name='img',
-        ),
-    ]
Index: djangoProject1/users/migrations/0006_rename_image_category_img_rename_image_image_img_and_more.py
===================================================================
diff --git a/djangoProject1/users/migrations/0006_rename_image_category_img_rename_image_image_img_and_more.py b/djangoProject1/users/migrations/0006_rename_image_category_img_rename_image_image_img_and_more.py
deleted file mode 100644
--- a/djangoProject1/users/migrations/0006_rename_image_category_img_rename_image_image_img_and_more.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ /dev/null	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
@@ -1,28 +0,0 @@
-# Generated by Django 5.0.7 on 2024-09-11 09:06
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('users', '0005_remove_category_img_remove_product_img_and_more'),
-    ]
-
-    operations = [
-        migrations.RenameField(
-            model_name='category',
-            old_name='image',
-            new_name='img',
-        ),
-        migrations.RenameField(
-            model_name='image',
-            old_name='image',
-            new_name='img',
-        ),
-        migrations.RenameField(
-            model_name='product',
-            old_name='image',
-            new_name='img',
-        ),
-    ]
Index: djangoProject1/users/migrations/0004_rename_img_image_image.py
===================================================================
diff --git a/djangoProject1/users/migrations/0004_rename_img_image_image.py b/djangoProject1/users/migrations/0004_rename_img_image_image.py
deleted file mode 100644
--- a/djangoProject1/users/migrations/0004_rename_img_image_image.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ /dev/null	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
@@ -1,28 +0,0 @@
-# Generated by Django 5.0.7 on 2024-09-11 08:43
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('users', '0003_category_img'),
-    ]
-
-    operations = [
-        migrations.RenameField(
-            model_name='image',
-            old_name='img',
-            new_name='image',
-        ),
-        migrations.RenameField(
-            model_name='product',
-            old_name='img',
-            new_name='image',
-        ),
-        migrations.RenameField(
-            model_name='category',
-            old_name='img',
-            new_name='image',
-        ),
-    ]
Index: djangoProject1/users/migrations/0003_category_img.py
===================================================================
diff --git a/djangoProject1/users/migrations/0003_category_img.py b/djangoProject1/users/migrations/0003_category_img.py
deleted file mode 100644
--- a/djangoProject1/users/migrations/0003_category_img.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ /dev/null	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
@@ -1,19 +0,0 @@
-# Generated by Django 5.0.7 on 2024-09-11 08:26
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('users', '0002_remove_brand_img'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='category',
-            name='img',
-            field=models.ImageField(default=1, upload_to='images/category/'),
-            preserve_default=False,
-        ),
-    ]
Index: djangoProject1/users/migrations/0005_remove_category_img_remove_product_img_and_more.py
===================================================================
diff --git a/djangoProject1/users/migrations/0005_remove_category_img_remove_product_img_and_more.py b/djangoProject1/users/migrations/0005_remove_category_img_remove_product_img_and_more.py
deleted file mode 100644
--- a/djangoProject1/users/migrations/0005_remove_category_img_remove_product_img_and_more.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ /dev/null	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
@@ -1,32 +0,0 @@
-# Generated by Django 5.0.7 on 2024-09-11 08:59
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('users', '0004_rename_img_image_image'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='category',
-            name='img',
-        ),
-        migrations.RemoveField(
-            model_name='product',
-            name='img',
-        ),
-        migrations.AddField(
-            model_name='category',
-            name='image',
-            field=models.ImageField(default=1, upload_to='images/category/'),
-            preserve_default=False,
-        ),
-        migrations.AddField(
-            model_name='product',
-            name='image',
-            field=models.ImageField(blank=True, null=True, upload_to='images/products/'),
-        ),
-    ]
Index: djangoProject1/users/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom .models import *\r\n\r\nadmin.site.register(Category)\r\nclass ProductAdmin(admin.ModelAdmin):\r\n    search_fields = ['name', 'category__name', 'brand__name']\r\n\r\nadmin.site.register(Image)\r\nadmin.site.register(Brand)\r\n\r\nadmin.site.register(Product, ProductAdmin)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject1/users/admin.py b/djangoProject1/users/admin.py
--- a/djangoProject1/users/admin.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ b/djangoProject1/users/admin.py	(date 1727288643936)
@@ -4,6 +4,8 @@
 admin.site.register(Category)
 class ProductAdmin(admin.ModelAdmin):
     search_fields = ['name', 'category__name', 'brand__name']
+    list_display = ['name', 'price', 'category', 'brand']
+    list_filter = ['category', 'brand']
 
 admin.site.register(Image)
 admin.site.register(Brand)
Index: djangoProject1/users/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\r\nfrom django.db import models\r\nfrom mptt.models import MPTTModel, TreeForeignKey\r\n\r\nclass UserManager(BaseUserManager):\r\n    def create_user(self, email, username, password=None, **extra_fields):\r\n        if not email:\r\n            raise ValueError('The Email field must be set')\r\n        email = self.normalize_email(email)\r\n        user = self.model(email=email, username=username, **extra_fields)\r\n        user.set_password(password)\r\n        user.save(using=self._db)\r\n        return user\r\n\r\n    def create_superuser(self, email, username, password=None, **extra_fields):\r\n        extra_fields.setdefault('is_staff', True)\r\n        extra_fields.setdefault('is_superuser', True)\r\n\r\n        return self.create_user(email, username, password, **extra_fields)\r\n\r\nclass User(AbstractBaseUser):\r\n    email = models.EmailField(unique=True)\r\n    username = models.CharField(max_length=255)\r\n    is_active = models.BooleanField(default=True)\r\n    is_staff = models.BooleanField(default=False)\r\n\r\n    objects = UserManager()\r\n\r\n    USERNAME_FIELD = 'email'\r\n    REQUIRED_FIELDS = ['username']\r\n\r\n    def __str__(self):\r\n        return self.email\r\n\r\nclass Image(models.Model):\r\n    title = models.CharField(max_length=100, blank=True)\r\n    image = models.ImageField(upload_to='images/image/')\r\n    uploaded_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.title\r\n\r\nclass Category(MPTTModel):\r\n    name = models.CharField(max_length=100)\r\n    image = models.ImageField(upload_to='images/category/', default=1)\r\n    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')\r\n\r\n    class MPTTMeta:\r\n        order_insertion_by = ['name']\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Brand(models.Model):\r\n    name = models.CharField(max_length=255)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Product(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    image = models.ImageField(upload_to='images/product/', null=True, blank=True)\r\n    description = models.TextField(blank=True)\r\n    price = models.DecimalField(max_digits=10, decimal_places=2)\r\n    brand = models.ForeignKey(Brand, on_delete=models.CASCADE, related_name='products', null=True, blank=True)\r\n    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')\r\n\r\n    def __str__(self):\r\n        return self.name
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject1/users/models.py b/djangoProject1/users/models.py
--- a/djangoProject1/users/models.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ b/djangoProject1/users/models.py	(date 1731765642224)
@@ -2,36 +2,6 @@
 from django.db import models
 from mptt.models import MPTTModel, TreeForeignKey
 
-class UserManager(BaseUserManager):
-    def create_user(self, email, username, password=None, **extra_fields):
-        if not email:
-            raise ValueError('The Email field must be set')
-        email = self.normalize_email(email)
-        user = self.model(email=email, username=username, **extra_fields)
-        user.set_password(password)
-        user.save(using=self._db)
-        return user
-
-    def create_superuser(self, email, username, password=None, **extra_fields):
-        extra_fields.setdefault('is_staff', True)
-        extra_fields.setdefault('is_superuser', True)
-
-        return self.create_user(email, username, password, **extra_fields)
-
-class User(AbstractBaseUser):
-    email = models.EmailField(unique=True)
-    username = models.CharField(max_length=255)
-    is_active = models.BooleanField(default=True)
-    is_staff = models.BooleanField(default=False)
-
-    objects = UserManager()
-
-    USERNAME_FIELD = 'email'
-    REQUIRED_FIELDS = ['username']
-
-    def __str__(self):
-        return self.email
-
 class Image(models.Model):
     title = models.CharField(max_length=100, blank=True)
     image = models.ImageField(upload_to='images/image/')
@@ -42,11 +12,11 @@
 
 class Category(MPTTModel):
     name = models.CharField(max_length=100)
-    image = models.ImageField(upload_to='images/category/', default=1)
+    image = models.ImageField(upload_to='images/category/', default=1, blank=True, null=True)
     parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')
 
     class MPTTMeta:
-        order_insertion_by = ['name']
+        ordering = ['name']
 
     def __str__(self):
         return self.name
Index: djangoProject1/djangoProject1/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for djangoProject1 project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.0.7.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\nfrom datetime import timedelta\r\nfrom django.db import models\r\nimport os\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-cs+6e@z!kt4hm%6ihb-%=!n9s^k^g*7!wy^lyy%4gx03rq2zj9'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'corsheaders',\r\n    'rest_framework',\r\n    'djoser',\r\n    'users',\r\n    'mptt',\r\n]\r\n\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n    'corsheaders.middleware.CorsMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'djangoProject1.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates'],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'djangoProject1.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'NAME': 'postgres',\r\n        'USER': 'postgres',\r\n        'PASSWORD': 'postgres',\r\n        'HOST': 'localhost',\r\n        'PORT': '5432',\r\n    }\r\n}\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\r\n\r\n# Media files settings\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\n\r\nREST_FRAMEWORK = {\r\n    'DEFAULT_AUTHENTICATION_CLASSES': (\r\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\r\n    ),\r\n    'DEFAULT_PERMISSION_CLASSES': (\r\n        'rest_framework.permissions.IsAuthenticated',\r\n        'rest_framework.permissions.AllowAny',\r\n    ),\r\n\r\n}\r\n\r\nSIMPLE_JWT = {\r\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\r\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\r\n    'ROTATE_REFRESH_TOKENS': False,\r\n    'BLACKLIST_AFTER_ROTATION': True,\r\n    'ALGORITHM': 'HS256',\r\n    'SIGNING_KEY': SECRET_KEY,\r\n    'VERIFYING_KEY': None,\r\n    'AUDIENCE': None,\r\n    'ISSUER': None,\r\n    'AUTH_HEADER_TYPES': ('JWT',),\r\n    'USER_ID_FIELD': 'id',\r\n    'USER_ID_CLAIM': 'user_id',\r\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\r\n    'TOKEN_TYPE_CLAIM': 'token_type',\r\n    'JTI_CLAIM': 'jti',\r\n}\r\n\r\nCORS_ALLOWED_ORIGINS = [\r\n    'http://localhost:8080',  # Адрес вашего фронтенда\r\n]\r\n\r\n# SECURE_SSL_REDIRECT = True\r\n# SESSION_COOKIE_SECURE = True\r\n# CSRF_COOKIE_SECURE = True\r\n# SECURE_BROWSER_XSS_FILTER = True\r\n# SECURE_CONTENT_TYPE_NOSNIFF = True\r\n# X_FRAME_OPTIONS = 'DENY'\r\n\r\nDJOSER = {\r\n    'USER_CREATE_PASSWORD_RETYPE': True,\r\n    'SERIALIZERS': {\r\n        'user_create': 'users.serializers.UserCreateSerializer',\r\n    },\r\n}\r\n\r\nCORS_ALLOW_ALL_ORIGINS = True  # Для тестирования. В продакшене укажите конкретные разрешенные источники\r\n\r\nAUTHENTICATION_BACKENDS = (\r\n    'django.contrib.auth.backends.ModelBackend',  # Default backend\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject1/djangoProject1/settings.py b/djangoProject1/djangoProject1/settings.py
--- a/djangoProject1/djangoProject1/settings.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ b/djangoProject1/djangoProject1/settings.py	(date 1731941026767)
@@ -154,7 +154,7 @@
 SIMPLE_JWT = {
     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
-    'ROTATE_REFRESH_TOKENS': False,
+    'ROTATE_REFRESH_TOKENS': True,
     'BLACKLIST_AFTER_ROTATION': True,
     'ALGORITHM': 'HS256',
     'SIGNING_KEY': SECRET_KEY,
@@ -166,6 +166,7 @@
     'USER_ID_CLAIM': 'user_id',
     'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
     'TOKEN_TYPE_CLAIM': 'token_type',
+    'TOKEN_BLACKLIST': True,
     'JTI_CLAIM': 'jti',
 }
 
Index: djangoProject1/users/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.conf import settings\r\nfrom django.conf.urls.static import static\r\nfrom django.urls import path\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    path('register/', views.register, name='register'),\r\n    path('login/', views.login, name='login'),\r\n    path('protected/', views.protected, name='protected'),\r\n    path('categories/', views.category_list_create, name='category-list-create'),\r\n    path('products/', views.product_list_create, name='product-list-create'),\r\n    path('products/<int:pk>/', views.product_detail, name='product-detail'),\r\n    path('images/', views.image_list, name='image-list'),\r\n    path('images/<int:pk>/', views.image_detail, name='image-detail'),\r\n    path('brands/', views.brand_list_create, name='brand-list-create'),\r\n    path('brands/<int:pk>/', views.brand_detail, name='brand-detail'),\r\n]\r\n\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject1/users/urls.py b/djangoProject1/users/urls.py
--- a/djangoProject1/users/urls.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ b/djangoProject1/users/urls.py	(date 1733604280455)
@@ -2,12 +2,21 @@
 from django.conf.urls.static import static
 from django.urls import path
 from . import views
+from rest_framework_simplejwt.views import (
+    TokenObtainPairView,
+    TokenRefreshView,
+)
 
 urlpatterns = [
+    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
+    path('token_refresh/', TokenRefreshView.as_view(), name='token_refresh'),
     path('register/', views.register, name='register'),
     path('login/', views.login, name='login'),
+    path('auth_user/', views.auth_user, name='auth_user'),
+    path('logout/', views.logout, name='logout'),
     path('protected/', views.protected, name='protected'),
     path('categories/', views.category_list_create, name='category-list-create'),
+    path('categories/<int:pk>/', views.category_detail, name='category-detail'),
     path('products/', views.product_list_create, name='product-list-create'),
     path('products/<int:pk>/', views.product_detail, name='product-detail'),
     path('images/', views.image_list, name='image-list'),
Index: djangoProject1/users/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework.decorators import api_view, permission_classes\r\nfrom rest_framework.permissions import IsAuthenticated, AllowAny\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom django.contrib.auth import authenticate\r\nfrom rest_framework_simplejwt.tokens import RefreshToken\r\nfrom .serializers import *\r\nfrom .models import *\r\n\r\n\r\n@api_view(['POST'])\r\n@permission_classes([AllowAny])\r\ndef login(request):\r\n    \"\"\"\r\n    View for user login.\r\n    \"\"\"\r\n    email = request.data.get('email')\r\n    password = request.data.get('password')\r\n    user = authenticate(email=email, password=password)\r\n\r\n    if user is not None:\r\n        refresh = RefreshToken.for_user(user)\r\n        return Response({\r\n            'refresh': str(refresh),\r\n            'access': str(refresh.access_token),\r\n        }, status=status.HTTP_200_OK)\r\n    return Response({\"detail\": \"Invalid credentials\"}, status=status.HTTP_401_UNAUTHORIZED)\r\n\r\n\r\n@api_view(['POST'])\r\n@permission_classes([AllowAny])\r\ndef register(request):\r\n    \"\"\"\r\n    View for user registration.\r\n    \"\"\"\r\n    serializer = UserSerializer(data=request.data)\r\n    if serializer.is_valid():\r\n        serializer.save()\r\n        return Response({\"detail\": \"User registered successfully\"}, status=status.HTTP_201_CREATED)\r\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@api_view(['GET'])\r\n@permission_classes([IsAuthenticated])\r\ndef protected(request):\r\n    \"\"\"\r\n    A protected view that requires authentication.\r\n    \"\"\"\r\n    return Response({\"detail\": \"You are authenticated\"}, status=status.HTTP_200_OK)\r\n\r\n\r\n@api_view(['GET', 'POST'])\r\n@permission_classes([AllowAny])\r\ndef category_list_create(request):\r\n    \"\"\"\r\n    List all categories or create a new category.\r\n    \"\"\"\r\n    if request.method == 'GET':\r\n        categories = Category.objects.all()\r\n        serializer = CategorySerializer(categories, many=True)\r\n        return Response(serializer.data)\r\n\r\n    if request.method == 'POST':\r\n        serializer = CategorySerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@api_view(['GET', 'POST'])\r\n@permission_classes([AllowAny])\r\ndef product_list_create(request):\r\n    \"\"\"\r\n    List all products or create a new product.\r\n    \"\"\"\r\n    if request.method == 'GET':\r\n        query = request.GET.get('search', '')\r\n        if query:\r\n            products = Product.objects.filter(name__icontains=query)\r\n        else:\r\n            products = Product.objects.all()\r\n\r\n        serializer = ProductSerializer(products, many=True)\r\n        return Response(serializer.data)\r\n\r\n    if request.method == 'POST':\r\n        serializer = ProductSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@api_view(['GET'])\r\n@permission_classes([IsAuthenticated])\r\ndef product_detail(request, pk):\r\n    try:\r\n        product = Product.objects.get(pk=pk)\r\n    except Product.DoesNotExist:\r\n        return Response(status=status.HTTP_404_NOT_FOUND)\r\n\r\n    serializer = ProductSerializer(product)\r\n    return Response(serializer.data)\r\n\r\n\r\n@api_view(['GET'])\r\n@permission_classes([AllowAny])\r\ndef image_list(request):\r\n    images = Image.objects.all()\r\n    serializer = ImageSerializer(images, many=True, context={'request': request})\r\n    return Response(serializer.data)\r\n\r\n\r\n@api_view(['GET'])\r\n@permission_classes([AllowAny])\r\ndef image_detail(request, pk):\r\n    \"\"\"\r\n    Retrieve, update or delete an image instance.\r\n    \"\"\"\r\n    try:\r\n        image = Image.objects.get(pk=pk)\r\n    except Image.DoesNotExist:\r\n        return Response(status=status.HTTP_404_NOT_FOUND)\r\n\r\n    serializer = ImageSerializer(image)\r\n    return Response(serializer.data)\r\n\r\n\r\n@api_view(['GET', 'POST'])\r\n@permission_classes([AllowAny])\r\ndef brand_list_create(request):\r\n    \"\"\"\r\n    List all brands or create a new brand.\r\n    \"\"\"\r\n    if request.method == 'GET':\r\n        brands = Brand.objects.all()\r\n        serializer = BrandSerializer(brands, many=True)\r\n        return Response(serializer.data)\r\n\r\n    if request.method == 'POST':\r\n        serializer = BrandSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n@api_view(['GET'])\r\n@permission_classes([AllowAny])\r\ndef brand_detail(request, pk):\r\n    \"\"\"\r\n    Retrieve a specific brand by id.\r\n    \"\"\"\r\n    try:\r\n        brand = Brand.objects.get(pk=pk)\r\n    except Brand.DoesNotExist:\r\n        return Response({\"detail\": \"Not found.\"}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n    serializer = BrandSerializer(brand)\r\n    return Response(serializer.data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject1/users/views.py b/djangoProject1/users/views.py
--- a/djangoProject1/users/views.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ b/djangoProject1/users/views.py	(date 1733579501492)
@@ -6,17 +6,19 @@
 from rest_framework_simplejwt.tokens import RefreshToken
 from .serializers import *
 from .models import *
+import logging
 
+logger = logging.getLogger(__name__)
 
 @api_view(['POST'])
 @permission_classes([AllowAny])
 def login(request):
-    """
-    View for user login.
-    """
-    email = request.data.get('email')
+    username = request.data.get('username')
     password = request.data.get('password')
-    user = authenticate(email=email, password=password)
+
+    logger.info(f"Attempting to login with username: {username}")
+
+    user = authenticate(username=username, password=password)
 
     if user is not None:
         refresh = RefreshToken.for_user(user)
@@ -24,21 +26,53 @@
             'refresh': str(refresh),
             'access': str(refresh.access_token),
         }, status=status.HTTP_200_OK)
+    logger.warning(f"Failed login attempt for username: {username}")
     return Response({"detail": "Invalid credentials"}, status=status.HTTP_401_UNAUTHORIZED)
 
 
 @api_view(['POST'])
-@permission_classes([AllowAny])
+@permission_classes([AllowAny])  # Allows unauthenticated access for registration
 def register(request):
     """
-    View for user registration.
+    View for user registration. This handles creating a new user in the system.
     """
     serializer = UserSerializer(data=request.data)
+
+    # Check if the provided data is valid according to the serializer
     if serializer.is_valid():
+        # Save the new user to the database
         serializer.save()
         return Response({"detail": "User registered successfully"}, status=status.HTTP_201_CREATED)
+
+    # If the serializer is not valid, return the errors in the response
     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
+@api_view(['GET'])
+@permission_classes([IsAuthenticated])
+def auth_user(request):
+    print(f"Headers: {request.headers}")
+    return Response({"user": request.user.username}, status=200)
+
+
+
+@api_view(['POST'])
+@permission_classes([IsAuthenticated])
+def logout(request):
+    """
+    Уничтожает рефреш токен, выполняя выход пользователя.
+    """
+    try:
+        refresh_token = request.data.get('refresh_token')
+        if not refresh_token:
+            return Response({"detail": "Refresh token is required."}, status=400)
+
+        token = RefreshToken(refresh_token)
+        token.blacklist()  # Помещаем токен в черный список (при включенной настройке `BLACKLIST_AFTER_ROTATION`)
+
+        return Response({"detail": "Logout successful."}, status=200)
+    except Exception as e:
+        return Response({"detail": "Invalid token."}, status=400)
+
 
 @api_view(['GET'])
 @permission_classes([IsAuthenticated])
@@ -67,6 +101,19 @@
             return Response(serializer.data, status=status.HTTP_201_CREATED)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
+@api_view(['GET'])
+@permission_classes([AllowAny])
+def category_detail(request, pk):
+    """
+    Retrieve a specific category by id.
+    """
+    try:
+        category = Category.objects.get(pk=pk)
+    except Category.DoesNotExist:
+        return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
+
+    serializer = CategorySerializer(category)
+    return Response(serializer.data)
 
 @api_view(['GET', 'POST'])
 @permission_classes([AllowAny])
Index: djangoProject1/users/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\r\nfrom .models import *\r\n\r\nclass ImageSerializer(serializers.ModelSerializer):\r\n    image_url = serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model = Image\r\n        fields = ['id', 'title', 'image', 'image_url']\r\n\r\n    def get_image_url(self, obj):\r\n        request = self.context.get('request')\r\n        return request.build_absolute_uri(obj.image.url)\r\n\r\n\r\nclass CategorySerializer(serializers.ModelSerializer):\r\n    children = serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model = Category\r\n        fields = ['id', 'name', 'image', 'parent', 'children']\r\n\r\n    def get_children(self, obj):\r\n        return CategorySerializer(obj.get_children(), many=True).data\r\n\r\nclass BrandSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Brand\r\n        fields = ['id', 'name']\r\n\r\nclass ProductSerializer(serializers.ModelSerializer):\r\n    image_url = serializers.SerializerMethodField()\r\n\r\n    class Meta:\r\n        model = Product\r\n        fields = ['id', 'name', 'description', 'brand', 'price', 'image', 'image_url', 'category']\r\n\r\n    def get_image_url(self, obj):\r\n        return obj.image_url\r\n\r\nclass UserSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = User\r\n        fields = ('id', 'email', 'password', 'username')  # Добавьте другие необходимые поля\r\n        extra_kwargs = {\r\n            'password': {'write_only': True}\r\n        }\r\n\r\n    def create(self, validated_data):\r\n        user = User.objects.create_user(**validated_data)\r\n        return user\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject1/users/serializers.py b/djangoProject1/users/serializers.py
--- a/djangoProject1/users/serializers.py	(revision a289e5f3cad52229b5aec140a16114db6472ecad)
+++ b/djangoProject1/users/serializers.py	(date 1731767172970)
@@ -1,5 +1,35 @@
+from django.contrib.auth.models import User
 from rest_framework import serializers
 from .models import *
+from django.contrib.auth.password_validation import validate_password
+
+
+class UserSerializer(serializers.ModelSerializer):
+    password2 = serializers.CharField(write_only=True)
+
+    class Meta:
+        model = User
+        fields = ('id', 'email', 'password', 'password2', 'username')
+        extra_kwargs = {
+            'password': {'write_only': True}
+        }
+
+    def validate(self, data):
+        if data['password'] != data['password2']:
+            raise serializers.ValidationError("Passwords do not match.")
+
+        # Optionally, you can add password strength validation here
+        try:
+            validate_password(data['password'])
+        except serializers.ValidationError as e:
+            raise serializers.ValidationError({'password': e.messages})
+
+        return data
+
+    def create(self, validated_data):
+        validated_data.pop('password2')  # Remove password2 before user creation
+        user = User.objects.create_user(**validated_data)
+        return user
 
 class ImageSerializer(serializers.ModelSerializer):
     image_url = serializers.SerializerMethodField()
@@ -29,23 +59,12 @@
         fields = ['id', 'name']
 
 class ProductSerializer(serializers.ModelSerializer):
-    image_url = serializers.SerializerMethodField()
+    brand = BrandSerializer()  # Вложенный сериализатор для отображения полного объекта бренда
+    category = CategorySerializer()
 
     class Meta:
         model = Product
-        fields = ['id', 'name', 'description', 'brand', 'price', 'image', 'image_url', 'category']
+        fields = ['id', 'name', 'description', 'brand', 'price', 'image', 'category']
 
-    def get_image_url(self, obj):
-        return obj.image_url
 
-class UserSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = User
-        fields = ('id', 'email', 'password', 'username')  # Добавьте другие необходимые поля
-        extra_kwargs = {
-            'password': {'write_only': True}
-        }
 
-    def create(self, validated_data):
-        user = User.objects.create_user(**validated_data)
-        return user
